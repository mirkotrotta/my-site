name: CI

on:
  push:
    branches: [main, feature/*]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          POSTGRES_USER_TEST=testuser
          POSTGRES_PASSWORD_TEST=testpass
          POSTGRES_DB_TEST=testdb
          EOF

      - name: Build test containers
        run: docker compose -f compose.integration-test.yaml build

      - name: Start test containers
        run: docker compose -f compose.integration-test.yaml up -d

      - name: Wait for containers to be ready
        run: sleep 30

      - name: Check container status
        run: docker compose -f compose.integration-test.yaml ps

      - name: Wait for API health check
        run: |
          echo "Waiting for API to be healthy..."
          for i in {1..30}; do
            if docker compose -f compose.integration-test.yaml exec -T api curl -f http://localhost:8000/health; then
              echo "API is healthy!"
              break
            fi
            echo "Attempt $i/30: API not ready yet..."
            sleep 10
          done

      - name: Run integration tests
        run: |
          echo "Testing API health endpoint..."
          docker compose -f compose.integration-test.yaml exec -T api curl -f http://localhost:8000/health
          
          echo "Testing frontend accessibility..."
          docker compose -f compose.integration-test.yaml exec -T web curl -f http://localhost:4000/ || echo "Frontend test failed but continuing..."

      - name: Show container logs if tests failed
        if: failure()
        run: docker compose -f compose.integration-test.yaml logs --tail 100

      - name: Stop test containers
        if: always()
        run: docker compose -f compose.integration-test.yaml down -v 