version: '3.8'

services:
  api:
    command: uvicorn main:app --host 0.0.0.0 --port ${API_PORT:-8000} --reload # Add --reload for dev
    volumes:
      - ./backend:/app
      # These anonymous volumes prevent host pollution if these dirs are in /app inside container
      - /app/__pycache__ 
      - /app/env # Assuming backend/Dockerfile might create a venv here
    ports:
      - "${API_PORT:-8000}:${API_PORT:-8000}"
    env_file:
      - .env.docker # Load Docker-specific development environment variables
    depends_on:
      db:
        condition: service_healthy # Ensure DB is ready before API starts
    # Healthcheck is now defined in compose.yaml and should work
    networks:
      - internal

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development # Use development stage for local development
    ports:
      - "${FRONTEND_PORT:-4000}:${FRONTEND_PORT:-4000}"
    environment:
      - NODE_ENV=development 
    volumes:
      - ./frontend:/app:delegated # Use delegated mode for better performance
      - frontend_next_cache:/app/.next # Named volume for Next.js cache
    env_file:
      - .env.docker 
    depends_on:
      api: # Restore dependency on api health
        condition: service_healthy
    networks:
      - internal

  db:
    ports:
      - "${DB_PORT:-5432}:5432" # Expose DB port for local development tools
    env_file:
      - .env.docker # Load database credentials
    # The volume `postgres_data` is already defined in compose.yaml
    # and will be used for persistence.
    networks:
      - internal

# Networks are inherited from compose.yaml
# Volumes are inherited from compose.yaml (postgres_data)
volumes:
  frontend_next_cache: 